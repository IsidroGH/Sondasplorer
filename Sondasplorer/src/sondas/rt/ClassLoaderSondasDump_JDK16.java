package sondas.rt;

import org.objectweb.asm.*;

/**
 * ClassLoader JDK 1.6 Sondas
 */
public class ClassLoaderSondasDump_JDK16 implements Opcodes {

public static byte[] dump () throws Exception {

ClassWriter cw = new ClassWriter(0);
FieldVisitor fv;
MethodVisitor mv;
AnnotationVisitor av0;

cw.visit(V1_5, ACC_PUBLIC + ACC_SUPER + ACC_ABSTRACT, "java/lang/ClassLoader", null, "java/lang/Object", null);

cw.visitInnerClass("java/lang/ClassLoader$1", null, null, ACC_FINAL);

cw.visitInnerClass("java/lang/ClassLoader$2", null, null, ACC_FINAL + ACC_STATIC);

cw.visitInnerClass("java/lang/ClassLoader$3", null, null, ACC_FINAL + ACC_STATIC);

cw.visitInnerClass("java/lang/ClassLoader$NativeLibrary", "java/lang/ClassLoader", "NativeLibrary", ACC_STATIC);

{
fv = cw.visitField(ACC_PRIVATE, "initialized", "Z", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE, "parent", "Ljava/lang/ClassLoader;", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE, "package2certs", "Ljava/util/Hashtable;", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(0, "nocerts", "[Ljava/security/cert/Certificate;", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE, "classes", "Ljava/util/Vector;", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE, "domains", "Ljava/util/Set;", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE, "packages", "Ljava/util/HashMap;", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE + ACC_STATIC, "bootstrapClassPath", "Lsun/misc/URLClassPath;", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE + ACC_STATIC, "scl", "Ljava/lang/ClassLoader;", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE + ACC_STATIC, "sclSet", "Z", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE, "defaultDomain", "Ljava/security/ProtectionDomain;", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE + ACC_STATIC, "loadedLibraryNames", "Ljava/util/Vector;", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE + ACC_STATIC, "systemNativeLibraries", "Ljava/util/Vector;", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE, "nativeLibraries", "Ljava/util/Vector;", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE + ACC_STATIC, "nativeLibraryContext", "Ljava/util/Stack;", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE + ACC_STATIC, "usr_paths", "[Ljava/lang/String;", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE + ACC_STATIC, "sys_paths", "[Ljava/lang/String;", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE, "defaultAssertionStatus", "Z", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(ACC_PRIVATE, "packageAssertionStatus", "Ljava/util/Map;", null, null);
fv.visitEnd();
}
{
fv = cw.visitField(0, "classAssertionStatus", "Ljava/util/Map;", null, null);
fv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE + ACC_STATIC + ACC_NATIVE, "registerNatives", "()V", null, null);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "addClass", "(Ljava/lang/Class;)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "classes", "Ljava/util/Vector;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "addElement", "(Ljava/lang/Object;)V");
mv.visitInsn(RETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PROTECTED, "<init>", "(Ljava/lang/ClassLoader;)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V");
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_0);
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "initialized", "Z");
mv.visitVarInsn(ALOAD, 0);
mv.visitTypeInsn(NEW, "java/util/Hashtable");
mv.visitInsn(DUP);
mv.visitIntInsn(BIPUSH, 11);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/Hashtable", "<init>", "(I)V");
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "package2certs", "Ljava/util/Hashtable;");
mv.visitVarInsn(ALOAD, 0);
mv.visitTypeInsn(NEW, "java/util/Vector");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/Vector", "<init>", "()V");
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "classes", "Ljava/util/Vector;");
mv.visitVarInsn(ALOAD, 0);
mv.visitTypeInsn(NEW, "java/util/HashSet");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/HashSet", "<init>", "()V");
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "domains", "Ljava/util/Set;");
mv.visitVarInsn(ALOAD, 0);
mv.visitTypeInsn(NEW, "java/util/HashMap");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/HashMap", "<init>", "()V");
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "packages", "Ljava/util/HashMap;");
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ACONST_NULL);
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "defaultDomain", "Ljava/security/ProtectionDomain;");
mv.visitVarInsn(ALOAD, 0);
mv.visitTypeInsn(NEW, "java/util/Vector");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/Vector", "<init>", "()V");
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "nativeLibraries", "Ljava/util/Vector;");
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_0);
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "defaultAssertionStatus", "Z");
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ACONST_NULL);
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "packageAssertionStatus", "Ljava/util/Map;");
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ACONST_NULL);
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "classAssertionStatus", "Ljava/util/Map;");
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "getSecurityManager", "()Ljava/lang/SecurityManager;");
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 2);
Label l0 = new Label();
mv.visitJumpInsn(IFNULL, l0);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/SecurityManager", "checkCreateClassLoader", "()V");
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "parent", "Ljava/lang/ClassLoader;");
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_1);
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "initialized", "Z");
mv.visitInsn(RETURN);
mv.visitMaxs(4, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PROTECTED, "<init>", "()V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Object", "<init>", "()V");
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_0);
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "initialized", "Z");
mv.visitVarInsn(ALOAD, 0);
mv.visitTypeInsn(NEW, "java/util/Hashtable");
mv.visitInsn(DUP);
mv.visitIntInsn(BIPUSH, 11);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/Hashtable", "<init>", "(I)V");
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "package2certs", "Ljava/util/Hashtable;");
mv.visitVarInsn(ALOAD, 0);
mv.visitTypeInsn(NEW, "java/util/Vector");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/Vector", "<init>", "()V");
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "classes", "Ljava/util/Vector;");
mv.visitVarInsn(ALOAD, 0);
mv.visitTypeInsn(NEW, "java/util/HashSet");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/HashSet", "<init>", "()V");
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "domains", "Ljava/util/Set;");
mv.visitVarInsn(ALOAD, 0);
mv.visitTypeInsn(NEW, "java/util/HashMap");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/HashMap", "<init>", "()V");
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "packages", "Ljava/util/HashMap;");
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ACONST_NULL);
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "defaultDomain", "Ljava/security/ProtectionDomain;");
mv.visitVarInsn(ALOAD, 0);
mv.visitTypeInsn(NEW, "java/util/Vector");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/Vector", "<init>", "()V");
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "nativeLibraries", "Ljava/util/Vector;");
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_0);
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "defaultAssertionStatus", "Z");
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ACONST_NULL);
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "packageAssertionStatus", "Ljava/util/Map;");
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ACONST_NULL);
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "classAssertionStatus", "Ljava/util/Map;");
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "getSecurityManager", "()Ljava/lang/SecurityManager;");
mv.visitVarInsn(ASTORE, 1);
mv.visitVarInsn(ALOAD, 1);
Label l0 = new Label();
mv.visitJumpInsn(IFNULL, l0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/SecurityManager", "checkCreateClassLoader", "()V");
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/ClassLoader", "getSystemClassLoader", "()Ljava/lang/ClassLoader;");
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "parent", "Ljava/lang/ClassLoader;");
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_1);
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "initialized", "Z");
mv.visitInsn(RETURN);
mv.visitMaxs(4, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "loadClass", "(Ljava/lang/String;)Ljava/lang/Class;", "(Ljava/lang/String;)Ljava/lang/Class<*>;", new String[] { "java/lang/ClassNotFoundException" });
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "loadClass", "(Ljava/lang/String;Z)Ljava/lang/Class;");
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PROTECTED + ACC_SYNCHRONIZED, "loadClass", "(Ljava/lang/String;Z)Ljava/lang/Class;", "(Ljava/lang/String;Z)Ljava/lang/Class<*>;", new String[] { "java/lang/ClassNotFoundException" });
mv.visitCode();
Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, "java/lang/ClassNotFoundException");
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "findLoadedClass", "(Ljava/lang/String;)Ljava/lang/Class;");
mv.visitVarInsn(ASTORE, 3);
mv.visitVarInsn(ALOAD, 3);
Label l3 = new Label();
mv.visitJumpInsn(IFNONNULL, l3);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "parent", "Ljava/lang/ClassLoader;");
Label l4 = new Label();
mv.visitJumpInsn(IFNULL, l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "parent", "Ljava/lang/ClassLoader;");
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "loadClass", "(Ljava/lang/String;Z)Ljava/lang/Class;");
mv.visitVarInsn(ASTORE, 3);
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "findBootstrapClass0", "(Ljava/lang/String;)Ljava/lang/Class;");
mv.visitVarInsn(ASTORE, 3);
mv.visitLabel(l1);
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "findClass", "(Ljava/lang/String;)Ljava/lang/Class;");
mv.visitVarInsn(ASTORE, 3);
mv.visitLabel(l3);
mv.visitVarInsn(ILOAD, 2);
Label l5 = new Label();
mv.visitJumpInsn(IFEQ, l5);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "resolveClass", "(Ljava/lang/Class;)V");
mv.visitLabel(l5);
mv.visitVarInsn(ALOAD, 3);
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE + ACC_SYNCHRONIZED, "loadClassInternal", "(Ljava/lang/String;)Ljava/lang/Class;", null, new String[] { "java/lang/ClassNotFoundException" });
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "loadClass", "(Ljava/lang/String;)Ljava/lang/Class;");
mv.visitInsn(ARETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "checkPackageAccess", "(Ljava/lang/Class;Ljava/security/ProtectionDomain;)V", null, null);
mv.visitCode();
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "getSecurityManager", "()Ljava/lang/SecurityManager;");
mv.visitVarInsn(ASTORE, 3);
mv.visitVarInsn(ALOAD, 3);
Label l0 = new Label();
mv.visitJumpInsn(IFNULL, l0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getName", "()Ljava/lang/String;");
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ALOAD, 4);
mv.visitIntInsn(BIPUSH, 46);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "lastIndexOf", "(I)I");
mv.visitVarInsn(ISTORE, 5);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(ICONST_M1);
mv.visitJumpInsn(IF_ICMPEQ, l0);
mv.visitTypeInsn(NEW, "java/lang/ClassLoader$1");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ALOAD, 4);
mv.visitVarInsn(ILOAD, 5);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader$1", "<init>", "(Ljava/lang/ClassLoader;Ljava/lang/SecurityManager;Ljava/lang/String;I)V");
mv.visitTypeInsn(NEW, "java/security/AccessControlContext");
mv.visitInsn(DUP);
mv.visitInsn(ICONST_1);
mv.visitTypeInsn(ANEWARRAY, "java/security/ProtectionDomain");
mv.visitInsn(DUP);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(AASTORE);
mv.visitMethodInsn(INVOKESPECIAL, "java/security/AccessControlContext", "<init>", "([Ljava/security/ProtectionDomain;)V");
mv.visitMethodInsn(INVOKESTATIC, "java/security/AccessController", "doPrivileged", "(Ljava/security/PrivilegedAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;");
mv.visitInsn(POP);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "domains", "Ljava/util/Set;");
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Set", "add", "(Ljava/lang/Object;)Z");
mv.visitInsn(POP);
mv.visitInsn(RETURN);
mv.visitMaxs(7, 6);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PROTECTED, "findClass", "(Ljava/lang/String;)Ljava/lang/Class;", "(Ljava/lang/String;)Ljava/lang/Class<*>;", new String[] { "java/lang/ClassNotFoundException" });
mv.visitCode();
mv.visitTypeInsn(NEW, "java/lang/ClassNotFoundException");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassNotFoundException", "<init>", "(Ljava/lang/String;)V");
mv.visitInsn(ATHROW);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PROTECTED + ACC_FINAL + ACC_DEPRECATED, "defineClass", "([BII)Ljava/lang/Class;", "([BII)Ljava/lang/Class<*>;", new String[] { "java/lang/ClassFormatError" });
{
av0 = mv.visitAnnotation("Ljava/lang/Deprecated;", true);
av0.visitEnd();
}
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ACONST_NULL);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ACONST_NULL);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "defineClass", "(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;");
mv.visitInsn(ARETURN);
mv.visitMaxs(6, 4);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PROTECTED + ACC_FINAL, "defineClass", "(Ljava/lang/String;[BII)Ljava/lang/Class;", "(Ljava/lang/String;[BII)Ljava/lang/Class<*>;", new String[] { "java/lang/ClassFormatError" });
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(ACONST_NULL);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "defineClass", "(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;");
mv.visitInsn(ARETURN);
mv.visitMaxs(6, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "preDefineClass", "(Ljava/lang/String;Ljava/security/ProtectionDomain;)Ljava/security/ProtectionDomain;", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "checkName", "(Ljava/lang/String;)Z");
Label l0 = new Label();
mv.visitJumpInsn(IFNE, l0);
mv.visitTypeInsn(NEW, "java/lang/NoClassDefFoundError");
mv.visitInsn(DUP);
mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V");
mv.visitLdcInsn("IllegalName: ");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;");
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/NoClassDefFoundError", "<init>", "(Ljava/lang/String;)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 1);
Label l1 = new Label();
mv.visitJumpInsn(IFNULL, l1);
mv.visitVarInsn(ALOAD, 1);
mv.visitLdcInsn("java.");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "startsWith", "(Ljava/lang/String;)Z");
mv.visitJumpInsn(IFEQ, l1);
mv.visitTypeInsn(NEW, "java/lang/SecurityException");
mv.visitInsn(DUP);
mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V");
mv.visitLdcInsn("Prohibited package name: ");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 1);
mv.visitIntInsn(BIPUSH, 46);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "lastIndexOf", "(I)I");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "substring", "(II)Ljava/lang/String;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;");
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/SecurityException", "<init>", "(Ljava/lang/String;)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 2);
Label l2 = new Label();
mv.visitJumpInsn(IFNONNULL, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "getDefaultDomain", "()Ljava/security/ProtectionDomain;");
mv.visitVarInsn(ASTORE, 2);
mv.visitLabel(l2);
mv.visitVarInsn(ALOAD, 1);
Label l3 = new Label();
mv.visitJumpInsn(IFNULL, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/security/ProtectionDomain", "getCodeSource", "()Ljava/security/CodeSource;");
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "checkCerts", "(Ljava/lang/String;Ljava/security/CodeSource;)V");
mv.visitLabel(l3);
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(ARETURN);
mv.visitMaxs(7, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "defineClassSourceLocation", "(Ljava/security/ProtectionDomain;)Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/security/ProtectionDomain", "getCodeSource", "()Ljava/security/CodeSource;");
mv.visitVarInsn(ASTORE, 2);
mv.visitInsn(ACONST_NULL);
mv.visitVarInsn(ASTORE, 3);
mv.visitVarInsn(ALOAD, 2);
Label l0 = new Label();
mv.visitJumpInsn(IFNULL, l0);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/security/CodeSource", "getLocation", "()Ljava/net/URL;");
mv.visitJumpInsn(IFNULL, l0);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/security/CodeSource", "getLocation", "()Ljava/net/URL;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/URL", "toString", "()Ljava/lang/String;");
mv.visitVarInsn(ASTORE, 3);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 3);
mv.visitInsn(ARETURN);
mv.visitMaxs(1, 4);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "defineTransformedClass", "(Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/ClassFormatError;Ljava/lang/String;)Ljava/lang/Class;", null, new String[] { "java/lang/ClassFormatError" });
mv.visitCode();
Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, "java/lang/ClassFormatError");
mv.visitMethodInsn(INVOKESTATIC, "sun/misc/ClassFileTransformer", "getTransformers", "()[Ljava/lang/Object;");
mv.visitVarInsn(ASTORE, 8);
mv.visitInsn(ACONST_NULL);
mv.visitVarInsn(ASTORE, 9);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 10);
Label l3 = new Label();
mv.visitLabel(l3);
mv.visitVarInsn(ALOAD, 8);
Label l4 = new Label();
mv.visitJumpInsn(IFNULL, l4);
mv.visitVarInsn(ILOAD, 10);
mv.visitVarInsn(ALOAD, 8);
mv.visitInsn(ARRAYLENGTH);
mv.visitJumpInsn(IF_ICMPGE, l4);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 8);
mv.visitVarInsn(ILOAD, 10);
mv.visitInsn(AALOAD);
mv.visitTypeInsn(CHECKCAST, "sun/misc/ClassFileTransformer");
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "sun/misc/ClassFileTransformer", "transform", "([BII)[B");
mv.visitVarInsn(ASTORE, 11);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 11);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 11);
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ALOAD, 5);
mv.visitVarInsn(ALOAD, 7);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "defineClass1", "(Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class;");
mv.visitVarInsn(ASTORE, 9);
mv.visitLabel(l1);
mv.visitJumpInsn(GOTO, l4);
mv.visitLabel(l2);
mv.visitVarInsn(ASTORE, 11);
mv.visitIincInsn(10, 1);
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l4);
mv.visitVarInsn(ALOAD, 9);
Label l5 = new Label();
mv.visitJumpInsn(IFNONNULL, l5);
mv.visitVarInsn(ALOAD, 6);
mv.visitInsn(ATHROW);
mv.visitLabel(l5);
mv.visitVarInsn(ALOAD, 9);
mv.visitInsn(ARETURN);
mv.visitMaxs(7, 12);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "postDefineClass", "(Ljava/lang/Class;Ljava/security/ProtectionDomain;)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/security/ProtectionDomain", "getCodeSource", "()Ljava/security/CodeSource;");
Label l0 = new Label();
mv.visitJumpInsn(IFNULL, l0);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/security/ProtectionDomain", "getCodeSource", "()Ljava/security/CodeSource;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/security/CodeSource", "getCertificates", "()[Ljava/security/cert/Certificate;");
mv.visitVarInsn(ASTORE, 3);
mv.visitVarInsn(ALOAD, 3);
mv.visitJumpInsn(IFNULL, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "setSigners", "(Ljava/lang/Class;[Ljava/lang/Object;)V");
mv.visitLabel(l0);
mv.visitInsn(RETURN);
mv.visitMaxs(3, 4);
mv.visitEnd();
}

{
	mv = cw.visitMethod(ACC_PROTECTED + ACC_FINAL, "defineClass", "(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;", "(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class<*>;", new String[] { "java/lang/ClassFormatError" });
	mv.visitCode();

//	Isidro
	mv.visitVarInsn(ALOAD, 1);
	mv.visitVarInsn(ALOAD, 2);
	mv.visitMethodInsn(INVOKESTATIC, "sondas/SondasLoader", "load", "(Ljava/lang/String;[B)[B");
	mv.visitVarInsn(ASTORE, 2);
	
	mv.visitInsn(ICONST_0);
	mv.visitVarInsn(ISTORE, 3);
	mv.visitVarInsn(ALOAD, 2);
	mv.visitInsn(ARRAYLENGTH);
	mv.visitVarInsn(ISTORE, 4);

	/*
	mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
	mv.visitLdcInsn("Definiendo clase!");
	//mv.visitVarInsn(ALOAD, 1);
	mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V");
	*/
//	 Fin Isidro

	Label l0 = new Label();
	Label l1 = new Label();
	Label l2 = new Label();
	mv.visitTryCatchBlock(l0, l1, l2, "java/lang/ClassFormatError");
	mv.visitVarInsn(ALOAD, 0);
	mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "check", "()V");
	mv.visitVarInsn(ALOAD, 0);
	mv.visitVarInsn(ALOAD, 1);
	mv.visitVarInsn(ALOAD, 5);
	mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "preDefineClass", "(Ljava/lang/String;Ljava/security/ProtectionDomain;)Ljava/security/ProtectionDomain;");
	mv.visitVarInsn(ASTORE, 5);
	mv.visitInsn(ACONST_NULL);
	mv.visitVarInsn(ASTORE, 6);
	mv.visitVarInsn(ALOAD, 0);
	mv.visitVarInsn(ALOAD, 5);
	mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "defineClassSourceLocation", "(Ljava/security/ProtectionDomain;)Ljava/lang/String;");
	mv.visitVarInsn(ASTORE, 7);
	mv.visitLabel(l0);
	mv.visitVarInsn(ALOAD, 0);
	mv.visitVarInsn(ALOAD, 1);
	mv.visitVarInsn(ALOAD, 2);
	mv.visitVarInsn(ILOAD, 3);
	mv.visitVarInsn(ILOAD, 4);
	mv.visitVarInsn(ALOAD, 5);
	mv.visitVarInsn(ALOAD, 7);
	mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "defineClass1", "(Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class;");
	mv.visitVarInsn(ASTORE, 6);
	mv.visitLabel(l1);
	Label l3 = new Label();
	mv.visitJumpInsn(GOTO, l3);
	mv.visitLabel(l2);
	mv.visitVarInsn(ASTORE, 8);
	mv.visitVarInsn(ALOAD, 0);
	mv.visitVarInsn(ALOAD, 1);
	mv.visitVarInsn(ALOAD, 2);
	mv.visitVarInsn(ILOAD, 3);
	mv.visitVarInsn(ILOAD, 4);
	mv.visitVarInsn(ALOAD, 5);
	mv.visitVarInsn(ALOAD, 8);
	mv.visitVarInsn(ALOAD, 7);
	mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "defineTransformedClass", "(Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/ClassFormatError;Ljava/lang/String;)Ljava/lang/Class;");
	mv.visitVarInsn(ASTORE, 6);
	mv.visitLabel(l3);
	mv.visitVarInsn(ALOAD, 0);
	mv.visitVarInsn(ALOAD, 6);
	mv.visitVarInsn(ALOAD, 5);
	mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "postDefineClass", "(Ljava/lang/Class;Ljava/security/ProtectionDomain;)V");
	mv.visitVarInsn(ALOAD, 6);
	mv.visitInsn(ARETURN);
	mv.visitMaxs(8, 9);
	mv.visitEnd();
	}


/*
{
mv = cw.visitMethod(ACC_PROTECTED + ACC_FINAL, "defineClass", "(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;", "(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class<*>;", new String[] { "java/lang/ClassFormatError" });
mv.visitCode();

// Instrumentalizado

mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
mv.visitLdcInsn("Entrando en defineClass");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V");


mv.visitVarInsn(ALOAD, 1);
mv.visitLdcInsn("pruebas.");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "startsWith", "(Ljava/lang/String;)Z");
Label l0_ = new Label();
mv.visitJumpInsn(IFEQ, l0_);


mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
mv.visitLdcInsn("Instrumentalizando clase");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V");



mv.visitTypeInsn(NEW, "org/objectweb/asm/ClassReader");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKESPECIAL, "org/objectweb/asm/ClassReader", "<init>", "([B)V");
mv.visitVarInsn(ASTORE, 6);


mv.visitTypeInsn(NEW, "sondas/SondasClassVisitor");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "sondas/SondasClassVisitor", "<init>", "()V");
mv.visitVarInsn(ASTORE, 7);



mv.visitVarInsn(ALOAD, 6);
mv.visitVarInsn(ALOAD, 7);
mv.visitMethodInsn(INVOKESTATIC, "org/objectweb/asm/util/ASMifierClassVisitor", "getDefaultAttributes", "()[Lorg/objectweb/asm/Attribute;");
mv.visitInsn(ICONST_2);
mv.visitMethodInsn(INVOKEVIRTUAL, "org/objectweb/asm/ClassReader", "accept", "(Lorg/objectweb/asm/ClassVisitor;[Lorg/objectweb/asm/Attribute;I)V");

mv.visitVarInsn(ALOAD, 7);
mv.visitMethodInsn(INVOKEVIRTUAL, "sondas/SondasClassVisitor", "getInstrumentalizedClass", "()[B");
mv.visitVarInsn(ASTORE, 2);


mv.visitFieldInsn(GETSTATIC, "java/lang/System", "out", "Ljava/io/PrintStream;");
mv.visitLdcInsn("Fin instrumentalizacion!");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/PrintStream", "println", "(Ljava/lang/String;)V");


mv.visitLabel(l0_);



//Fin Isidro

Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, "java/lang/ClassFormatError");
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "check", "()V");
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "preDefineClass", "(Ljava/lang/String;Ljava/security/ProtectionDomain;)Ljava/security/ProtectionDomain;");
mv.visitVarInsn(ASTORE, 5);
mv.visitInsn(ACONST_NULL);
mv.visitVarInsn(ASTORE, 7);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "defineClassSourceLocation", "(Ljava/security/ProtectionDomain;)Ljava/lang/String;");
mv.visitVarInsn(ASTORE, 8);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ALOAD, 5);
mv.visitVarInsn(ALOAD, 8);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "defineClass1", "(Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class;");
mv.visitVarInsn(ASTORE, 7);
mv.visitLabel(l1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitVarInsn(ASTORE, 9);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ALOAD, 5);
mv.visitVarInsn(ALOAD, 9);
mv.visitVarInsn(ALOAD, 8);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "defineTransformedClass", "(Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/ClassFormatError;Ljava/lang/String;)Ljava/lang/Class;");
mv.visitVarInsn(ASTORE, 7);
mv.visitLabel(l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 7);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "postDefineClass", "(Ljava/lang/Class;Ljava/security/ProtectionDomain;)V");
mv.visitVarInsn(ALOAD, 7);
mv.visitInsn(ARETURN);
mv.visitMaxs(8, 9);
mv.visitEnd();
}
*/
{
mv = cw.visitMethod(ACC_PROTECTED + ACC_FINAL, "defineClass", "(Ljava/lang/String;Ljava/nio/ByteBuffer;Ljava/security/ProtectionDomain;)Ljava/lang/Class;", "(Ljava/lang/String;Ljava/nio/ByteBuffer;Ljava/security/ProtectionDomain;)Ljava/lang/Class<*>;", new String[] { "java/lang/ClassFormatError" });
mv.visitCode();
Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, "java/lang/ClassFormatError");
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "check", "()V");
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/nio/ByteBuffer", "remaining", "()I");
mv.visitVarInsn(ISTORE, 4);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/nio/ByteBuffer", "isDirect", "()Z");
Label l3 = new Label();
mv.visitJumpInsn(IFNE, l3);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/nio/ByteBuffer", "hasArray", "()Z");
Label l4 = new Label();
mv.visitJumpInsn(IFEQ, l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/nio/ByteBuffer", "array", "()[B");
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/nio/ByteBuffer", "position", "()I");
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/nio/ByteBuffer", "arrayOffset", "()I");
mv.visitInsn(IADD);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "defineClass", "(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;");
mv.visitInsn(ARETURN);
mv.visitLabel(l4);
mv.visitVarInsn(ILOAD, 4);
mv.visitIntInsn(NEWARRAY, T_BYTE);
mv.visitVarInsn(ASTORE, 5);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/nio/ByteBuffer", "get", "([B)Ljava/nio/ByteBuffer;");
mv.visitInsn(POP);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 5);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "defineClass", "(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;");
mv.visitInsn(ARETURN);
mv.visitLabel(l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "preDefineClass", "(Ljava/lang/String;Ljava/security/ProtectionDomain;)Ljava/security/ProtectionDomain;");
mv.visitVarInsn(ASTORE, 3);
mv.visitInsn(ACONST_NULL);
mv.visitVarInsn(ASTORE, 5);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "defineClassSourceLocation", "(Ljava/security/ProtectionDomain;)Ljava/lang/String;");
mv.visitVarInsn(ASTORE, 6);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/nio/ByteBuffer", "position", "()I");
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "defineClass2", "(Ljava/lang/String;Ljava/nio/ByteBuffer;IILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class;");
mv.visitVarInsn(ASTORE, 5);
mv.visitLabel(l1);
Label l5 = new Label();
mv.visitJumpInsn(GOTO, l5);
mv.visitLabel(l2);
mv.visitVarInsn(ASTORE, 7);
mv.visitVarInsn(ILOAD, 4);
mv.visitIntInsn(NEWARRAY, T_BYTE);
mv.visitVarInsn(ASTORE, 8);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ALOAD, 8);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/nio/ByteBuffer", "get", "([B)Ljava/nio/ByteBuffer;");
mv.visitInsn(POP);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 8);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ALOAD, 7);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "defineTransformedClass", "(Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/ClassFormatError;Ljava/lang/String;)Ljava/lang/Class;");
mv.visitVarInsn(ASTORE, 5);
mv.visitLabel(l5);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 5);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "postDefineClass", "(Ljava/lang/Class;Ljava/security/ProtectionDomain;)V");
mv.visitVarInsn(ALOAD, 5);
mv.visitInsn(ARETURN);
mv.visitMaxs(8, 9);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE + ACC_NATIVE, "defineClass0", "(Ljava/lang/String;[BIILjava/security/ProtectionDomain;)Ljava/lang/Class;", null, null);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE + ACC_NATIVE, "defineClass1", "(Ljava/lang/String;[BIILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class;", null, null);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE + ACC_NATIVE, "defineClass2", "(Ljava/lang/String;Ljava/nio/ByteBuffer;IILjava/security/ProtectionDomain;Ljava/lang/String;)Ljava/lang/Class;", null, null);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "checkName", "(Ljava/lang/String;)Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 1);
Label l0 = new Label();
mv.visitJumpInsn(IFNULL, l0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I");
Label l1 = new Label();
mv.visitJumpInsn(IFNE, l1);
mv.visitLabel(l0);
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 1);
mv.visitIntInsn(BIPUSH, 47);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "indexOf", "(I)I");
mv.visitInsn(ICONST_M1);
Label l2 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l2);
mv.visitMethodInsn(INVOKESTATIC, "sun/misc/VM", "allowArraySyntax", "()Z");
Label l3 = new Label();
mv.visitJumpInsn(IFNE, l3);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "charAt", "(I)C");
mv.visitIntInsn(BIPUSH, 91);
mv.visitJumpInsn(IF_ICMPNE, l3);
mv.visitLabel(l2);
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitLabel(l3);
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE + ACC_SYNCHRONIZED, "checkCerts", "(Ljava/lang/String;Ljava/security/CodeSource;)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 1);
mv.visitIntInsn(BIPUSH, 46);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "lastIndexOf", "(I)I");
mv.visitVarInsn(ISTORE, 3);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ICONST_M1);
Label l0 = new Label();
mv.visitJumpInsn(IF_ICMPNE, l0);
mv.visitLdcInsn("");
Label l1 = new Label();
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "substring", "(II)Ljava/lang/String;");
mv.visitLabel(l1);
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "package2certs", "Ljava/util/Hashtable;");
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Hashtable", "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
mv.visitTypeInsn(CHECKCAST, "[Ljava/security/cert/Certificate;");
mv.visitTypeInsn(CHECKCAST, "[Ljava/security/cert/Certificate;");
mv.visitVarInsn(ASTORE, 5);
mv.visitVarInsn(ALOAD, 5);
Label l2 = new Label();
mv.visitJumpInsn(IFNONNULL, l2);
mv.visitVarInsn(ALOAD, 2);
Label l3 = new Label();
mv.visitJumpInsn(IFNULL, l3);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/security/CodeSource", "getCertificates", "()[Ljava/security/cert/Certificate;");
mv.visitVarInsn(ASTORE, 5);
mv.visitLabel(l3);
mv.visitVarInsn(ALOAD, 5);
Label l4 = new Label();
mv.visitJumpInsn(IFNONNULL, l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "nocerts", "[Ljava/security/cert/Certificate;");
Label l5 = new Label();
mv.visitJumpInsn(IFNONNULL, l5);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_0);
mv.visitTypeInsn(ANEWARRAY, "java/security/cert/Certificate");
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "nocerts", "[Ljava/security/cert/Certificate;");
mv.visitLabel(l5);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "nocerts", "[Ljava/security/cert/Certificate;");
mv.visitVarInsn(ASTORE, 5);
mv.visitLabel(l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "package2certs", "Ljava/util/Hashtable;");
mv.visitVarInsn(ALOAD, 4);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Hashtable", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
mv.visitInsn(POP);
Label l6 = new Label();
mv.visitJumpInsn(GOTO, l6);
mv.visitLabel(l2);
mv.visitInsn(ACONST_NULL);
mv.visitVarInsn(ASTORE, 6);
mv.visitVarInsn(ALOAD, 2);
Label l7 = new Label();
mv.visitJumpInsn(IFNULL, l7);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/security/CodeSource", "getCertificates", "()[Ljava/security/cert/Certificate;");
mv.visitVarInsn(ASTORE, 6);
mv.visitLabel(l7);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 5);
mv.visitVarInsn(ALOAD, 6);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "compareCerts", "([Ljava/security/cert/Certificate;[Ljava/security/cert/Certificate;)Z");
mv.visitJumpInsn(IFNE, l6);
mv.visitTypeInsn(NEW, "java/lang/SecurityException");
mv.visitInsn(DUP);
mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V");
mv.visitLdcInsn("class \"");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitLdcInsn("\"'s signer information does not match signer information of other classes in the same package");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;");
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/SecurityException", "<init>", "(Ljava/lang/String;)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l6);
mv.visitInsn(RETURN);
mv.visitMaxs(4, 7);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "compareCerts", "([Ljava/security/cert/Certificate;[Ljava/security/cert/Certificate;)Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 2);
Label l0 = new Label();
mv.visitJumpInsn(IFNULL, l0);
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(ARRAYLENGTH);
Label l1 = new Label();
mv.visitJumpInsn(IFNE, l1);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ARRAYLENGTH);
Label l2 = new Label();
mv.visitJumpInsn(IFNE, l2);
mv.visitInsn(ICONST_1);
Label l3 = new Label();
mv.visitJumpInsn(GOTO, l3);
mv.visitLabel(l2);
mv.visitInsn(ICONST_0);
mv.visitLabel(l3);
mv.visitInsn(IRETURN);
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(ARRAYLENGTH);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ARRAYLENGTH);
Label l4 = new Label();
mv.visitJumpInsn(IF_ICMPEQ, l4);
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitLabel(l4);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 4);
Label l5 = new Label();
mv.visitLabel(l5);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(ARRAYLENGTH);
Label l6 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l6);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 3);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 5);
Label l7 = new Label();
mv.visitLabel(l7);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ARRAYLENGTH);
Label l8 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l8);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(AALOAD);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/security/cert/Certificate", "equals", "(Ljava/lang/Object;)Z");
Label l9 = new Label();
mv.visitJumpInsn(IFEQ, l9);
mv.visitInsn(ICONST_1);
mv.visitVarInsn(ISTORE, 3);
mv.visitJumpInsn(GOTO, l8);
mv.visitLabel(l9);
mv.visitIincInsn(5, 1);
mv.visitJumpInsn(GOTO, l7);
mv.visitLabel(l8);
mv.visitVarInsn(ILOAD, 3);
Label l10 = new Label();
mv.visitJumpInsn(IFNE, l10);
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitLabel(l10);
mv.visitIincInsn(4, 1);
mv.visitJumpInsn(GOTO, l5);
mv.visitLabel(l6);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 4);
Label l11 = new Label();
mv.visitLabel(l11);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ARRAYLENGTH);
Label l12 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l12);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 3);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 5);
Label l13 = new Label();
mv.visitLabel(l13);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(ARRAYLENGTH);
Label l14 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l14);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(AALOAD);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/security/cert/Certificate", "equals", "(Ljava/lang/Object;)Z");
Label l15 = new Label();
mv.visitJumpInsn(IFEQ, l15);
mv.visitInsn(ICONST_1);
mv.visitVarInsn(ISTORE, 3);
mv.visitJumpInsn(GOTO, l14);
mv.visitLabel(l15);
mv.visitIincInsn(5, 1);
mv.visitJumpInsn(GOTO, l13);
mv.visitLabel(l14);
mv.visitVarInsn(ILOAD, 3);
Label l16 = new Label();
mv.visitJumpInsn(IFNE, l16);
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitLabel(l16);
mv.visitIincInsn(4, 1);
mv.visitJumpInsn(GOTO, l11);
mv.visitLabel(l12);
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
mv.visitMaxs(3, 6);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PROTECTED + ACC_FINAL, "resolveClass", "(Ljava/lang/Class;)V", "(Ljava/lang/Class<*>;)V", null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "check", "()V");
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "resolveClass0", "(Ljava/lang/Class;)V");
mv.visitInsn(RETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE + ACC_NATIVE, "resolveClass0", "(Ljava/lang/Class;)V", null, null);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PROTECTED + ACC_FINAL, "findSystemClass", "(Ljava/lang/String;)Ljava/lang/Class;", "(Ljava/lang/String;)Ljava/lang/Class<*>;", new String[] { "java/lang/ClassNotFoundException" });
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "check", "()V");
mv.visitMethodInsn(INVOKESTATIC, "java/lang/ClassLoader", "getSystemClassLoader", "()Ljava/lang/ClassLoader;");
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 2);
Label l0 = new Label();
mv.visitJumpInsn(IFNONNULL, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "checkName", "(Ljava/lang/String;)Z");
Label l1 = new Label();
mv.visitJumpInsn(IFNE, l1);
mv.visitTypeInsn(NEW, "java/lang/ClassNotFoundException");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassNotFoundException", "<init>", "(Ljava/lang/String;)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "findBootstrapClass", "(Ljava/lang/String;)Ljava/lang/Class;");
mv.visitInsn(ARETURN);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "loadClass", "(Ljava/lang/String;)Ljava/lang/Class;");
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "findBootstrapClass0", "(Ljava/lang/String;)Ljava/lang/Class;", null, new String[] { "java/lang/ClassNotFoundException" });
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "check", "()V");
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "checkName", "(Ljava/lang/String;)Z");
Label l0 = new Label();
mv.visitJumpInsn(IFNE, l0);
mv.visitTypeInsn(NEW, "java/lang/ClassNotFoundException");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassNotFoundException", "<init>", "(Ljava/lang/String;)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "findBootstrapClass", "(Ljava/lang/String;)Ljava/lang/Class;");
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE + ACC_NATIVE, "findBootstrapClass", "(Ljava/lang/String;)Ljava/lang/Class;", null, new String[] { "java/lang/ClassNotFoundException" });
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "check", "()V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "initialized", "Z");
Label l0 = new Label();
mv.visitJumpInsn(IFNE, l0);
mv.visitTypeInsn(NEW, "java/lang/SecurityException");
mv.visitInsn(DUP);
mv.visitLdcInsn("ClassLoader object not initialized");
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/SecurityException", "<init>", "(Ljava/lang/String;)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l0);
mv.visitInsn(RETURN);
mv.visitMaxs(3, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PROTECTED + ACC_FINAL, "findLoadedClass", "(Ljava/lang/String;)Ljava/lang/Class;", "(Ljava/lang/String;)Ljava/lang/Class<*>;", null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "check", "()V");
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "checkName", "(Ljava/lang/String;)Z");
Label l0 = new Label();
mv.visitJumpInsn(IFNE, l0);
mv.visitInsn(ACONST_NULL);
mv.visitInsn(ARETURN);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "findLoadedClass0", "(Ljava/lang/String;)Ljava/lang/Class;");
mv.visitInsn(ARETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE + ACC_FINAL + ACC_NATIVE, "findLoadedClass0", "(Ljava/lang/String;)Ljava/lang/Class;", null, null);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PROTECTED + ACC_FINAL, "setSigners", "(Ljava/lang/Class;[Ljava/lang/Object;)V", "(Ljava/lang/Class<*>;[Ljava/lang/Object;)V", null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "check", "()V");
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "setSigners", "([Ljava/lang/Object;)V");
mv.visitInsn(RETURN);
mv.visitMaxs(2, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getResource", "(Ljava/lang/String;)Ljava/net/URL;", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "parent", "Ljava/lang/ClassLoader;");
Label l0 = new Label();
mv.visitJumpInsn(IFNULL, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "parent", "Ljava/lang/ClassLoader;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "getResource", "(Ljava/lang/String;)Ljava/net/URL;");
mv.visitVarInsn(ASTORE, 2);
Label l1 = new Label();
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/ClassLoader", "getBootstrapResource", "(Ljava/lang/String;)Ljava/net/URL;");
mv.visitVarInsn(ASTORE, 2);
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 2);
Label l2 = new Label();
mv.visitJumpInsn(IFNONNULL, l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "findResource", "(Ljava/lang/String;)Ljava/net/URL;");
mv.visitVarInsn(ASTORE, 2);
mv.visitLabel(l2);
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(ARETURN);
mv.visitMaxs(2, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getResources", "(Ljava/lang/String;)Ljava/util/Enumeration;", "(Ljava/lang/String;)Ljava/util/Enumeration<Ljava/net/URL;>;", new String[] { "java/io/IOException" });
mv.visitCode();
mv.visitInsn(ICONST_2);
mv.visitTypeInsn(ANEWARRAY, "java/util/Enumeration");
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "parent", "Ljava/lang/ClassLoader;");
Label l0 = new Label();
mv.visitJumpInsn(IFNULL, l0);
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "parent", "Ljava/lang/ClassLoader;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "getResources", "(Ljava/lang/String;)Ljava/util/Enumeration;");
mv.visitInsn(AASTORE);
Label l1 = new Label();
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/ClassLoader", "getBootstrapResources", "(Ljava/lang/String;)Ljava/util/Enumeration;");
mv.visitInsn(AASTORE);
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(ICONST_1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "findResources", "(Ljava/lang/String;)Ljava/util/Enumeration;");
mv.visitInsn(AASTORE);
mv.visitTypeInsn(NEW, "sun/misc/CompoundEnumeration");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKESPECIAL, "sun/misc/CompoundEnumeration", "<init>", "([Ljava/util/Enumeration;)V");
mv.visitInsn(ARETURN);
mv.visitMaxs(4, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PROTECTED, "findResource", "(Ljava/lang/String;)Ljava/net/URL;", null, null);
mv.visitCode();
mv.visitInsn(ACONST_NULL);
mv.visitInsn(ARETURN);
mv.visitMaxs(1, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PROTECTED, "findResources", "(Ljava/lang/String;)Ljava/util/Enumeration;", "(Ljava/lang/String;)Ljava/util/Enumeration<Ljava/net/URL;>;", new String[] { "java/io/IOException" });
mv.visitCode();
mv.visitTypeInsn(NEW, "sun/misc/CompoundEnumeration");
mv.visitInsn(DUP);
mv.visitInsn(ICONST_0);
mv.visitTypeInsn(ANEWARRAY, "java/util/Enumeration");
mv.visitMethodInsn(INVOKESPECIAL, "sun/misc/CompoundEnumeration", "<init>", "([Ljava/util/Enumeration;)V");
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "getSystemResource", "(Ljava/lang/String;)Ljava/net/URL;", null, null);
mv.visitCode();
mv.visitMethodInsn(INVOKESTATIC, "java/lang/ClassLoader", "getSystemClassLoader", "()Ljava/lang/ClassLoader;");
mv.visitVarInsn(ASTORE, 1);
mv.visitVarInsn(ALOAD, 1);
Label l0 = new Label();
mv.visitJumpInsn(IFNONNULL, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/ClassLoader", "getBootstrapResource", "(Ljava/lang/String;)Ljava/net/URL;");
mv.visitInsn(ARETURN);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "getResource", "(Ljava/lang/String;)Ljava/net/URL;");
mv.visitInsn(ARETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "getSystemResources", "(Ljava/lang/String;)Ljava/util/Enumeration;", "(Ljava/lang/String;)Ljava/util/Enumeration<Ljava/net/URL;>;", new String[] { "java/io/IOException" });
mv.visitCode();
mv.visitMethodInsn(INVOKESTATIC, "java/lang/ClassLoader", "getSystemClassLoader", "()Ljava/lang/ClassLoader;");
mv.visitVarInsn(ASTORE, 1);
mv.visitVarInsn(ALOAD, 1);
Label l0 = new Label();
mv.visitJumpInsn(IFNONNULL, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/ClassLoader", "getBootstrapResources", "(Ljava/lang/String;)Ljava/util/Enumeration;");
mv.visitInsn(ARETURN);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "getResources", "(Ljava/lang/String;)Ljava/util/Enumeration;");
mv.visitInsn(ARETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE + ACC_STATIC, "getBootstrapResource", "(Ljava/lang/String;)Ljava/net/URL;", null, null);
mv.visitCode();
mv.visitMethodInsn(INVOKESTATIC, "java/lang/ClassLoader", "getBootstrapClassPath", "()Lsun/misc/URLClassPath;");
mv.visitVarInsn(ASTORE, 1);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "sun/misc/URLClassPath", "getResource", "(Ljava/lang/String;)Lsun/misc/Resource;");
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 2);
Label l0 = new Label();
mv.visitJumpInsn(IFNULL, l0);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "sun/misc/Resource", "getURL", "()Ljava/net/URL;");
Label l1 = new Label();
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l0);
mv.visitInsn(ACONST_NULL);
mv.visitLabel(l1);
mv.visitInsn(ARETURN);
mv.visitMaxs(2, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE + ACC_STATIC, "getBootstrapResources", "(Ljava/lang/String;)Ljava/util/Enumeration;", null, new String[] { "java/io/IOException" });
mv.visitCode();
mv.visitMethodInsn(INVOKESTATIC, "java/lang/ClassLoader", "getBootstrapClassPath", "()Lsun/misc/URLClassPath;");
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "sun/misc/URLClassPath", "getResources", "(Ljava/lang/String;)Ljava/util/Enumeration;");
mv.visitVarInsn(ASTORE, 1);
mv.visitTypeInsn(NEW, "java/lang/ClassLoader$2");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader$2", "<init>", "(Ljava/util/Enumeration;)V");
mv.visitInsn(ARETURN);
mv.visitMaxs(3, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_STATIC, "getBootstrapClassPath", "()Lsun/misc/URLClassPath;", null, null);
mv.visitCode();
mv.visitFieldInsn(GETSTATIC, "java/lang/ClassLoader", "bootstrapClassPath", "Lsun/misc/URLClassPath;");
Label l0 = new Label();
mv.visitJumpInsn(IFNONNULL, l0);
mv.visitMethodInsn(INVOKESTATIC, "sun/misc/Launcher", "getBootstrapClassPath", "()Lsun/misc/URLClassPath;");
mv.visitFieldInsn(PUTSTATIC, "java/lang/ClassLoader", "bootstrapClassPath", "Lsun/misc/URLClassPath;");
mv.visitLabel(l0);
mv.visitFieldInsn(GETSTATIC, "java/lang/ClassLoader", "bootstrapClassPath", "Lsun/misc/URLClassPath;");
mv.visitInsn(ARETURN);
mv.visitMaxs(1, 0);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC, "getResourceAsStream", "(Ljava/lang/String;)Ljava/io/InputStream;", null, null);
mv.visitCode();
Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, "java/io/IOException");
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "getResource", "(Ljava/lang/String;)Ljava/net/URL;");
mv.visitVarInsn(ASTORE, 2);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 2);
Label l3 = new Label();
mv.visitJumpInsn(IFNULL, l3);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/URL", "openStream", "()Ljava/io/InputStream;");
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l3);
mv.visitInsn(ACONST_NULL);
mv.visitLabel(l1);
mv.visitInsn(ARETURN);
mv.visitLabel(l2);
mv.visitVarInsn(ASTORE, 3);
mv.visitInsn(ACONST_NULL);
mv.visitInsn(ARETURN);
mv.visitMaxs(2, 4);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "getSystemResourceAsStream", "(Ljava/lang/String;)Ljava/io/InputStream;", null, null);
mv.visitCode();
Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, "java/io/IOException");
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/ClassLoader", "getSystemResource", "(Ljava/lang/String;)Ljava/net/URL;");
mv.visitVarInsn(ASTORE, 1);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 1);
Label l3 = new Label();
mv.visitJumpInsn(IFNULL, l3);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/net/URL", "openStream", "()Ljava/io/InputStream;");
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l3);
mv.visitInsn(ACONST_NULL);
mv.visitLabel(l1);
mv.visitInsn(ARETURN);
mv.visitLabel(l2);
mv.visitVarInsn(ASTORE, 2);
mv.visitInsn(ACONST_NULL);
mv.visitInsn(ARETURN);
mv.visitMaxs(1, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_FINAL, "getParent", "()Ljava/lang/ClassLoader;", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "parent", "Ljava/lang/ClassLoader;");
Label l0 = new Label();
mv.visitJumpInsn(IFNONNULL, l0);
mv.visitInsn(ACONST_NULL);
mv.visitInsn(ARETURN);
mv.visitLabel(l0);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "getSecurityManager", "()Ljava/lang/SecurityManager;");
mv.visitVarInsn(ASTORE, 1);
mv.visitVarInsn(ALOAD, 1);
Label l1 = new Label();
mv.visitJumpInsn(IFNULL, l1);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/ClassLoader", "getCallerClassLoader", "()Ljava/lang/ClassLoader;");
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 2);
mv.visitJumpInsn(IFNULL, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "isAncestor", "(Ljava/lang/ClassLoader;)Z");
mv.visitJumpInsn(IFNE, l1);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETSTATIC, "sun/security/util/SecurityConstants", "GET_CLASSLOADER_PERMISSION", "Ljava/lang/RuntimePermission;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/SecurityManager", "checkPermission", "(Ljava/security/Permission;)V");
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "parent", "Ljava/lang/ClassLoader;");
mv.visitInsn(ARETURN);
mv.visitMaxs(2, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, "getSystemClassLoader", "()Ljava/lang/ClassLoader;", null, null);
mv.visitCode();
mv.visitMethodInsn(INVOKESTATIC, "java/lang/ClassLoader", "initSystemClassLoader", "()V");
mv.visitFieldInsn(GETSTATIC, "java/lang/ClassLoader", "scl", "Ljava/lang/ClassLoader;");
Label l0 = new Label();
mv.visitJumpInsn(IFNONNULL, l0);
mv.visitInsn(ACONST_NULL);
mv.visitInsn(ARETURN);
mv.visitLabel(l0);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "getSecurityManager", "()Ljava/lang/SecurityManager;");
mv.visitVarInsn(ASTORE, 0);
mv.visitVarInsn(ALOAD, 0);
Label l1 = new Label();
mv.visitJumpInsn(IFNULL, l1);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/ClassLoader", "getCallerClassLoader", "()Ljava/lang/ClassLoader;");
mv.visitVarInsn(ASTORE, 1);
mv.visitVarInsn(ALOAD, 1);
mv.visitJumpInsn(IFNULL, l1);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETSTATIC, "java/lang/ClassLoader", "scl", "Ljava/lang/ClassLoader;");
mv.visitJumpInsn(IF_ACMPEQ, l1);
mv.visitFieldInsn(GETSTATIC, "java/lang/ClassLoader", "scl", "Ljava/lang/ClassLoader;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "isAncestor", "(Ljava/lang/ClassLoader;)Z");
mv.visitJumpInsn(IFNE, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETSTATIC, "sun/security/util/SecurityConstants", "GET_CLASSLOADER_PERMISSION", "Ljava/lang/RuntimePermission;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/SecurityManager", "checkPermission", "(Ljava/security/Permission;)V");
mv.visitLabel(l1);
mv.visitFieldInsn(GETSTATIC, "java/lang/ClassLoader", "scl", "Ljava/lang/ClassLoader;");
mv.visitInsn(ARETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE + ACC_STATIC + ACC_SYNCHRONIZED, "initSystemClassLoader", "()V", null, null);
mv.visitCode();
Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, "java/security/PrivilegedActionException");
mv.visitFieldInsn(GETSTATIC, "java/lang/ClassLoader", "sclSet", "Z");
Label l3 = new Label();
mv.visitJumpInsn(IFNE, l3);
mv.visitFieldInsn(GETSTATIC, "java/lang/ClassLoader", "scl", "Ljava/lang/ClassLoader;");
Label l4 = new Label();
mv.visitJumpInsn(IFNULL, l4);
mv.visitTypeInsn(NEW, "java/lang/IllegalStateException");
mv.visitInsn(DUP);
mv.visitLdcInsn("recursive invocation");
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalStateException", "<init>", "(Ljava/lang/String;)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l4);
mv.visitMethodInsn(INVOKESTATIC, "sun/misc/Launcher", "getLauncher", "()Lsun/misc/Launcher;");
mv.visitVarInsn(ASTORE, 0);
mv.visitVarInsn(ALOAD, 0);
Label l5 = new Label();
mv.visitJumpInsn(IFNULL, l5);
mv.visitInsn(ACONST_NULL);
mv.visitVarInsn(ASTORE, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "sun/misc/Launcher", "getClassLoader", "()Ljava/lang/ClassLoader;");
mv.visitFieldInsn(PUTSTATIC, "java/lang/ClassLoader", "scl", "Ljava/lang/ClassLoader;");
mv.visitLabel(l0);
mv.visitTypeInsn(NEW, "java/lang/SystemClassLoaderAction");
mv.visitInsn(DUP);
mv.visitFieldInsn(GETSTATIC, "java/lang/ClassLoader", "scl", "Ljava/lang/ClassLoader;");
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/SystemClassLoaderAction", "<init>", "(Ljava/lang/ClassLoader;)V");
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "java/security/AccessController", "doPrivileged", "(Ljava/security/PrivilegedExceptionAction;)Ljava/lang/Object;");
mv.visitTypeInsn(CHECKCAST, "java/lang/ClassLoader");
mv.visitFieldInsn(PUTSTATIC, "java/lang/ClassLoader", "scl", "Ljava/lang/ClassLoader;");
mv.visitLabel(l1);
Label l6 = new Label();
mv.visitJumpInsn(GOTO, l6);
mv.visitLabel(l2);
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/security/PrivilegedActionException", "getCause", "()Ljava/lang/Throwable;");
mv.visitVarInsn(ASTORE, 1);
mv.visitVarInsn(ALOAD, 1);
mv.visitTypeInsn(INSTANCEOF, "java/lang/reflect/InvocationTargetException");
mv.visitJumpInsn(IFEQ, l6);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Throwable", "getCause", "()Ljava/lang/Throwable;");
mv.visitVarInsn(ASTORE, 1);
mv.visitLabel(l6);
mv.visitVarInsn(ALOAD, 1);
mv.visitJumpInsn(IFNULL, l5);
mv.visitVarInsn(ALOAD, 1);
mv.visitTypeInsn(INSTANCEOF, "java/lang/Error");
Label l7 = new Label();
mv.visitJumpInsn(IFEQ, l7);
mv.visitVarInsn(ALOAD, 1);
mv.visitTypeInsn(CHECKCAST, "java/lang/Error");
mv.visitInsn(ATHROW);
mv.visitLabel(l7);
mv.visitTypeInsn(NEW, "java/lang/Error");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Error", "<init>", "(Ljava/lang/Throwable;)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l5);
mv.visitInsn(ICONST_1);
mv.visitFieldInsn(PUTSTATIC, "java/lang/ClassLoader", "sclSet", "Z");
mv.visitLabel(l3);
mv.visitInsn(RETURN);
mv.visitMaxs(3, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(0, "isAncestor", "(Ljava/lang/ClassLoader;)Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ASTORE, 2);
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 2);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "parent", "Ljava/lang/ClassLoader;");
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 2);
Label l1 = new Label();
mv.visitJumpInsn(IF_ACMPNE, l1);
mv.visitInsn(ICONST_1);
mv.visitInsn(IRETURN);
mv.visitLabel(l1);
mv.visitVarInsn(ALOAD, 2);
mv.visitJumpInsn(IFNONNULL, l0);
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitMaxs(2, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_STATIC, "getCallerClassLoader", "()Ljava/lang/ClassLoader;", null, null);
mv.visitCode();
mv.visitInsn(ICONST_3);
mv.visitMethodInsn(INVOKESTATIC, "sun/reflect/Reflection", "getCallerClass", "(I)Ljava/lang/Class;");
mv.visitVarInsn(ASTORE, 0);
mv.visitVarInsn(ALOAD, 0);
Label l0 = new Label();
mv.visitJumpInsn(IFNONNULL, l0);
mv.visitInsn(ACONST_NULL);
mv.visitInsn(ARETURN);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getClassLoader0", "()Ljava/lang/ClassLoader;");
mv.visitInsn(ARETURN);
mv.visitMaxs(1, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PROTECTED, "definePackage", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/net/URL;)Ljava/lang/Package;", null, new String[] { "java/lang/IllegalArgumentException" });
mv.visitCode();
Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, null);
Label l3 = new Label();
mv.visitTryCatchBlock(l2, l3, l2, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "packages", "Ljava/util/HashMap;");
mv.visitInsn(DUP);
mv.visitVarInsn(ASTORE, 9);
mv.visitInsn(MONITORENTER);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "getPackage", "(Ljava/lang/String;)Ljava/lang/Package;");
mv.visitVarInsn(ASTORE, 10);
mv.visitVarInsn(ALOAD, 10);
Label l4 = new Label();
mv.visitJumpInsn(IFNULL, l4);
mv.visitTypeInsn(NEW, "java/lang/IllegalArgumentException");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/IllegalArgumentException", "<init>", "(Ljava/lang/String;)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l4);
mv.visitTypeInsn(NEW, "java/lang/Package");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ALOAD, 4);
mv.visitVarInsn(ALOAD, 5);
mv.visitVarInsn(ALOAD, 6);
mv.visitVarInsn(ALOAD, 7);
mv.visitVarInsn(ALOAD, 8);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Package", "<init>", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/net/URL;Ljava/lang/ClassLoader;)V");
mv.visitVarInsn(ASTORE, 10);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "packages", "Ljava/util/HashMap;");
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 10);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/HashMap", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
mv.visitInsn(POP);
mv.visitVarInsn(ALOAD, 10);
mv.visitVarInsn(ALOAD, 9);
mv.visitInsn(MONITOREXIT);
mv.visitLabel(l1);
mv.visitInsn(ARETURN);
mv.visitLabel(l2);
mv.visitVarInsn(ASTORE, 11);
mv.visitVarInsn(ALOAD, 9);
mv.visitInsn(MONITOREXIT);
mv.visitLabel(l3);
mv.visitVarInsn(ALOAD, 11);
mv.visitInsn(ATHROW);
mv.visitMaxs(11, 12);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PROTECTED, "getPackage", "(Ljava/lang/String;)Ljava/lang/Package;", null, null);
mv.visitCode();
Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, null);
Label l3 = new Label();
mv.visitTryCatchBlock(l2, l3, l2, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "packages", "Ljava/util/HashMap;");
mv.visitInsn(DUP);
mv.visitVarInsn(ASTORE, 2);
mv.visitInsn(MONITORENTER);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "packages", "Ljava/util/HashMap;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/HashMap", "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
mv.visitTypeInsn(CHECKCAST, "java/lang/Package");
mv.visitVarInsn(ASTORE, 3);
mv.visitVarInsn(ALOAD, 3);
Label l4 = new Label();
mv.visitJumpInsn(IFNONNULL, l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "parent", "Ljava/lang/ClassLoader;");
Label l5 = new Label();
mv.visitJumpInsn(IFNULL, l5);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "parent", "Ljava/lang/ClassLoader;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "getPackage", "(Ljava/lang/String;)Ljava/lang/Package;");
mv.visitVarInsn(ASTORE, 3);
Label l6 = new Label();
mv.visitJumpInsn(GOTO, l6);
mv.visitLabel(l5);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Package", "getSystemPackage", "(Ljava/lang/String;)Ljava/lang/Package;");
mv.visitVarInsn(ASTORE, 3);
mv.visitLabel(l6);
mv.visitVarInsn(ALOAD, 3);
mv.visitJumpInsn(IFNULL, l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "packages", "Ljava/util/HashMap;");
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/HashMap", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
mv.visitInsn(POP);
mv.visitLabel(l4);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(MONITOREXIT);
mv.visitLabel(l1);
mv.visitInsn(ARETURN);
mv.visitLabel(l2);
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(MONITOREXIT);
mv.visitLabel(l3);
mv.visitVarInsn(ALOAD, 4);
mv.visitInsn(ATHROW);
mv.visitMaxs(3, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PROTECTED, "getPackages", "()[Ljava/lang/Package;", null, null);
mv.visitCode();
Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, null);
Label l3 = new Label();
mv.visitTryCatchBlock(l2, l3, l2, null);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "packages", "Ljava/util/HashMap;");
mv.visitInsn(DUP);
mv.visitVarInsn(ASTORE, 2);
mv.visitInsn(MONITORENTER);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "packages", "Ljava/util/HashMap;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/HashMap", "clone", "()Ljava/lang/Object;");
mv.visitTypeInsn(CHECKCAST, "java/util/Map");
mv.visitVarInsn(ASTORE, 1);
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(MONITOREXIT);
mv.visitLabel(l1);
Label l4 = new Label();
mv.visitJumpInsn(GOTO, l4);
mv.visitLabel(l2);
mv.visitVarInsn(ASTORE, 3);
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(MONITOREXIT);
mv.visitLabel(l3);
mv.visitVarInsn(ALOAD, 3);
mv.visitInsn(ATHROW);
mv.visitLabel(l4);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "parent", "Ljava/lang/ClassLoader;");
Label l5 = new Label();
mv.visitJumpInsn(IFNULL, l5);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "parent", "Ljava/lang/ClassLoader;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "getPackages", "()[Ljava/lang/Package;");
mv.visitVarInsn(ASTORE, 2);
Label l6 = new Label();
mv.visitJumpInsn(GOTO, l6);
mv.visitLabel(l5);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Package", "getSystemPackages", "()[Ljava/lang/Package;");
mv.visitVarInsn(ASTORE, 2);
mv.visitLabel(l6);
mv.visitVarInsn(ALOAD, 2);
Label l7 = new Label();
mv.visitJumpInsn(IFNULL, l7);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 3);
Label l8 = new Label();
mv.visitLabel(l8);
mv.visitVarInsn(ILOAD, 3);
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(ARRAYLENGTH);
mv.visitJumpInsn(IF_ICMPGE, l7);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(AALOAD);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Package", "getName", "()Ljava/lang/String;");
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
Label l9 = new Label();
mv.visitJumpInsn(IFNONNULL, l9);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 4);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(AALOAD);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
mv.visitInsn(POP);
mv.visitLabel(l9);
mv.visitIincInsn(3, 1);
mv.visitJumpInsn(GOTO, l8);
mv.visitLabel(l7);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "values", "()Ljava/util/Collection;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "size", "()I");
mv.visitTypeInsn(ANEWARRAY, "java/lang/Package");
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Collection", "toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;");
mv.visitTypeInsn(CHECKCAST, "[Ljava/lang/Package;");
mv.visitTypeInsn(CHECKCAST, "[Ljava/lang/Package;");
mv.visitInsn(ARETURN);
mv.visitMaxs(4, 5);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PROTECTED, "findLibrary", "(Ljava/lang/String;)Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitInsn(ACONST_NULL);
mv.visitInsn(ARETURN);
mv.visitMaxs(1, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE + ACC_SYNCHRONIZED, "getDefaultDomain", "()Ljava/security/ProtectionDomain;", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "defaultDomain", "Ljava/security/ProtectionDomain;");
Label l0 = new Label();
mv.visitJumpInsn(IFNONNULL, l0);
mv.visitTypeInsn(NEW, "java/security/CodeSource");
mv.visitInsn(DUP);
mv.visitInsn(ACONST_NULL);
mv.visitInsn(ACONST_NULL);
mv.visitTypeInsn(CHECKCAST, "[Ljava/security/cert/Certificate;");
mv.visitMethodInsn(INVOKESPECIAL, "java/security/CodeSource", "<init>", "(Ljava/net/URL;[Ljava/security/cert/Certificate;)V");
mv.visitVarInsn(ASTORE, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitTypeInsn(NEW, "java/security/ProtectionDomain");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ACONST_NULL);
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ACONST_NULL);
mv.visitMethodInsn(INVOKESPECIAL, "java/security/ProtectionDomain", "<init>", "(Ljava/security/CodeSource;Ljava/security/PermissionCollection;Ljava/lang/ClassLoader;[Ljava/security/Principal;)V");
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "defaultDomain", "Ljava/security/ProtectionDomain;");
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "defaultDomain", "Ljava/security/ProtectionDomain;");
mv.visitInsn(ARETURN);
mv.visitMaxs(7, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE + ACC_STATIC, "initializePath", "(Ljava/lang/String;)[Ljava/lang/String;", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitLdcInsn("");
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "getProperty", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");
mv.visitVarInsn(ASTORE, 1);
mv.visitFieldInsn(GETSTATIC, "java/io/File", "pathSeparator", "Ljava/lang/String;");
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "length", "()I");
mv.visitVarInsn(ISTORE, 3);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "indexOf", "(Ljava/lang/String;)I");
mv.visitVarInsn(ISTORE, 4);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 6);
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitVarInsn(ILOAD, 4);
Label l1 = new Label();
mv.visitJumpInsn(IFLT, l1);
mv.visitIincInsn(6, 1);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "indexOf", "(Ljava/lang/String;I)I");
mv.visitVarInsn(ISTORE, 4);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitVarInsn(ILOAD, 6);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitTypeInsn(ANEWARRAY, "java/lang/String");
mv.visitVarInsn(ASTORE, 7);
mv.visitInsn(ICONST_0);
mv.visitInsn(DUP);
mv.visitVarInsn(ISTORE, 4);
mv.visitVarInsn(ISTORE, 6);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "indexOf", "(Ljava/lang/String;)I");
mv.visitVarInsn(ISTORE, 5);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitVarInsn(ILOAD, 5);
Label l3 = new Label();
mv.visitJumpInsn(IFLT, l3);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(ISUB);
Label l4 = new Label();
mv.visitJumpInsn(IFLE, l4);
mv.visitVarInsn(ALOAD, 7);
mv.visitVarInsn(ILOAD, 6);
mv.visitIincInsn(6, 1);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "substring", "(II)Ljava/lang/String;");
mv.visitInsn(AASTORE);
Label l5 = new Label();
mv.visitJumpInsn(GOTO, l5);
mv.visitLabel(l4);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(ISUB);
mv.visitJumpInsn(IFNE, l5);
mv.visitVarInsn(ALOAD, 7);
mv.visitVarInsn(ILOAD, 6);
mv.visitIincInsn(6, 1);
mv.visitLdcInsn(".");
mv.visitInsn(AASTORE);
mv.visitLabel(l5);
mv.visitVarInsn(ILOAD, 5);
mv.visitInsn(ICONST_1);
mv.visitInsn(IADD);
mv.visitVarInsn(ISTORE, 4);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ILOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "indexOf", "(Ljava/lang/String;I)I");
mv.visitVarInsn(ISTORE, 5);
mv.visitJumpInsn(GOTO, l2);
mv.visitLabel(l3);
mv.visitVarInsn(ALOAD, 7);
mv.visitVarInsn(ILOAD, 6);
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 4);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "substring", "(II)Ljava/lang/String;");
mv.visitInsn(AASTORE);
mv.visitVarInsn(ALOAD, 7);
mv.visitInsn(ARETURN);
mv.visitMaxs(5, 8);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_STATIC, "loadLibrary", "(Ljava/lang/Class;Ljava/lang/String;Z)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
Label l0 = new Label();
mv.visitJumpInsn(IFNONNULL, l0);
mv.visitInsn(ACONST_NULL);
Label l1 = new Label();
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getClassLoader", "()Ljava/lang/ClassLoader;");
mv.visitLabel(l1);
mv.visitVarInsn(ASTORE, 3);
mv.visitFieldInsn(GETSTATIC, "java/lang/ClassLoader", "sys_paths", "[Ljava/lang/String;");
Label l2 = new Label();
mv.visitJumpInsn(IFNONNULL, l2);
mv.visitLdcInsn("java.library.path");
mv.visitMethodInsn(INVOKESTATIC, "java/lang/ClassLoader", "initializePath", "(Ljava/lang/String;)[Ljava/lang/String;");
mv.visitFieldInsn(PUTSTATIC, "java/lang/ClassLoader", "usr_paths", "[Ljava/lang/String;");
mv.visitLdcInsn("sun.boot.library.path");
mv.visitMethodInsn(INVOKESTATIC, "java/lang/ClassLoader", "initializePath", "(Ljava/lang/String;)[Ljava/lang/String;");
mv.visitFieldInsn(PUTSTATIC, "java/lang/ClassLoader", "sys_paths", "[Ljava/lang/String;");
mv.visitLabel(l2);
mv.visitVarInsn(ILOAD, 2);
Label l3 = new Label();
mv.visitJumpInsn(IFEQ, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitTypeInsn(NEW, "java/io/File");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/File", "<init>", "(Ljava/lang/String;)V");
mv.visitMethodInsn(INVOKESTATIC, "java/lang/ClassLoader", "loadLibrary0", "(Ljava/lang/Class;Ljava/io/File;)Z");
Label l4 = new Label();
mv.visitJumpInsn(IFEQ, l4);
mv.visitInsn(RETURN);
mv.visitLabel(l4);
mv.visitTypeInsn(NEW, "java/lang/UnsatisfiedLinkError");
mv.visitInsn(DUP);
mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V");
mv.visitLdcInsn("Can't load library: ");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;");
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/UnsatisfiedLinkError", "<init>", "(Ljava/lang/String;)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l3);
mv.visitVarInsn(ALOAD, 3);
Label l5 = new Label();
mv.visitJumpInsn(IFNULL, l5);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader", "findLibrary", "(Ljava/lang/String;)Ljava/lang/String;");
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ALOAD, 4);
mv.visitJumpInsn(IFNULL, l5);
mv.visitTypeInsn(NEW, "java/io/File");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKESPECIAL, "java/io/File", "<init>", "(Ljava/lang/String;)V");
mv.visitVarInsn(ASTORE, 5);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "isAbsolute", "()Z");
Label l6 = new Label();
mv.visitJumpInsn(IFNE, l6);
mv.visitTypeInsn(NEW, "java/lang/UnsatisfiedLinkError");
mv.visitInsn(DUP);
mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V");
mv.visitLdcInsn("ClassLoader.findLibrary failed to return an absolute path: ");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;");
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/UnsatisfiedLinkError", "<init>", "(Ljava/lang/String;)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l6);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/ClassLoader", "loadLibrary0", "(Ljava/lang/Class;Ljava/io/File;)Z");
Label l7 = new Label();
mv.visitJumpInsn(IFEQ, l7);
mv.visitInsn(RETURN);
mv.visitLabel(l7);
mv.visitTypeInsn(NEW, "java/lang/UnsatisfiedLinkError");
mv.visitInsn(DUP);
mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V");
mv.visitLdcInsn("Can't load ");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitVarInsn(ALOAD, 4);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;");
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/UnsatisfiedLinkError", "<init>", "(Ljava/lang/String;)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l5);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 4);
Label l8 = new Label();
mv.visitLabel(l8);
mv.visitVarInsn(ILOAD, 4);
mv.visitFieldInsn(GETSTATIC, "java/lang/ClassLoader", "sys_paths", "[Ljava/lang/String;");
mv.visitInsn(ARRAYLENGTH);
Label l9 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l9);
mv.visitTypeInsn(NEW, "java/io/File");
mv.visitInsn(DUP);
mv.visitFieldInsn(GETSTATIC, "java/lang/ClassLoader", "sys_paths", "[Ljava/lang/String;");
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "mapLibraryName", "(Ljava/lang/String;)Ljava/lang/String;");
mv.visitMethodInsn(INVOKESPECIAL, "java/io/File", "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
mv.visitVarInsn(ASTORE, 5);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/ClassLoader", "loadLibrary0", "(Ljava/lang/Class;Ljava/io/File;)Z");
Label l10 = new Label();
mv.visitJumpInsn(IFEQ, l10);
mv.visitInsn(RETURN);
mv.visitLabel(l10);
mv.visitIincInsn(4, 1);
mv.visitJumpInsn(GOTO, l8);
mv.visitLabel(l9);
mv.visitVarInsn(ALOAD, 3);
Label l11 = new Label();
mv.visitJumpInsn(IFNULL, l11);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 4);
Label l12 = new Label();
mv.visitLabel(l12);
mv.visitVarInsn(ILOAD, 4);
mv.visitFieldInsn(GETSTATIC, "java/lang/ClassLoader", "usr_paths", "[Ljava/lang/String;");
mv.visitInsn(ARRAYLENGTH);
mv.visitJumpInsn(IF_ICMPGE, l11);
mv.visitTypeInsn(NEW, "java/io/File");
mv.visitInsn(DUP);
mv.visitFieldInsn(GETSTATIC, "java/lang/ClassLoader", "usr_paths", "[Ljava/lang/String;");
mv.visitVarInsn(ILOAD, 4);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "mapLibraryName", "(Ljava/lang/String;)Ljava/lang/String;");
mv.visitMethodInsn(INVOKESPECIAL, "java/io/File", "<init>", "(Ljava/lang/String;Ljava/lang/String;)V");
mv.visitVarInsn(ASTORE, 5);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/ClassLoader", "loadLibrary0", "(Ljava/lang/Class;Ljava/io/File;)Z");
Label l13 = new Label();
mv.visitJumpInsn(IFEQ, l13);
mv.visitInsn(RETURN);
mv.visitLabel(l13);
mv.visitIincInsn(4, 1);
mv.visitJumpInsn(GOTO, l12);
mv.visitLabel(l11);
mv.visitTypeInsn(NEW, "java/lang/UnsatisfiedLinkError");
mv.visitInsn(DUP);
mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V");
mv.visitLdcInsn("no ");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitLdcInsn(" in java.library.path");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;");
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/UnsatisfiedLinkError", "<init>", "(Ljava/lang/String;)V");
mv.visitInsn(ATHROW);
mv.visitMaxs(4, 6);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE + ACC_STATIC, "loadLibrary0", "(Ljava/lang/Class;Ljava/io/File;)Z", null, null);
mv.visitCode();
Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, "java/io/IOException");
Label l3 = new Label();
Label l4 = new Label();
Label l5 = new Label();
mv.visitTryCatchBlock(l3, l4, l5, null);
Label l6 = new Label();
mv.visitTryCatchBlock(l5, l6, l5, null);
Label l7 = new Label();
Label l8 = new Label();
Label l9 = new Label();
mv.visitTryCatchBlock(l7, l8, l9, null);
Label l10 = new Label();
Label l11 = new Label();
mv.visitTryCatchBlock(l10, l11, l9, null);
Label l12 = new Label();
Label l13 = new Label();
mv.visitTryCatchBlock(l12, l13, l9, null);
Label l14 = new Label();
mv.visitTryCatchBlock(l9, l14, l9, null);
Label l15 = new Label();
Label l16 = new Label();
Label l17 = new Label();
mv.visitTryCatchBlock(l15, l16, l17, null);
Label l18 = new Label();
Label l19 = new Label();
mv.visitTryCatchBlock(l18, l19, l17, null);
Label l20 = new Label();
mv.visitTryCatchBlock(l10, l20, l17, null);
Label l21 = new Label();
mv.visitTryCatchBlock(l12, l21, l17, null);
Label l22 = new Label();
mv.visitTryCatchBlock(l9, l22, l17, null);
mv.visitTypeInsn(NEW, "java/lang/ClassLoader$3");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader$3", "<init>", "(Ljava/io/File;)V");
mv.visitMethodInsn(INVOKESTATIC, "java/security/AccessController", "doPrivileged", "(Ljava/security/PrivilegedAction;)Ljava/lang/Object;");
mv.visitTypeInsn(CHECKCAST, "java/lang/Boolean");
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Boolean", "booleanValue", "()Z");
mv.visitJumpInsn(IFNE, l0);
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/io/File", "getCanonicalPath", "()Ljava/lang/String;");
mv.visitVarInsn(ASTORE, 3);
mv.visitLabel(l1);
Label l23 = new Label();
mv.visitJumpInsn(GOTO, l23);
mv.visitLabel(l2);
mv.visitVarInsn(ASTORE, 4);
mv.visitInsn(ICONST_0);
mv.visitInsn(IRETURN);
mv.visitLabel(l23);
mv.visitVarInsn(ALOAD, 0);
Label l24 = new Label();
mv.visitJumpInsn(IFNONNULL, l24);
mv.visitInsn(ACONST_NULL);
Label l25 = new Label();
mv.visitJumpInsn(GOTO, l25);
mv.visitLabel(l24);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getClassLoader", "()Ljava/lang/ClassLoader;");
mv.visitLabel(l25);
mv.visitVarInsn(ASTORE, 4);
mv.visitVarInsn(ALOAD, 4);
Label l26 = new Label();
mv.visitJumpInsn(IFNULL, l26);
mv.visitVarInsn(ALOAD, 4);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "nativeLibraries", "Ljava/util/Vector;");
Label l27 = new Label();
mv.visitJumpInsn(GOTO, l27);
mv.visitLabel(l26);
mv.visitFieldInsn(GETSTATIC, "java/lang/ClassLoader", "systemNativeLibraries", "Ljava/util/Vector;");
mv.visitLabel(l27);
mv.visitVarInsn(ASTORE, 5);
mv.visitVarInsn(ALOAD, 5);
mv.visitInsn(DUP);
mv.visitVarInsn(ASTORE, 6);
mv.visitInsn(MONITORENTER);
mv.visitLabel(l15);
mv.visitVarInsn(ALOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "size", "()I");
mv.visitVarInsn(ISTORE, 7);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 8);
Label l28 = new Label();
mv.visitLabel(l28);
mv.visitVarInsn(ILOAD, 8);
mv.visitVarInsn(ILOAD, 7);
Label l29 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l29);
mv.visitVarInsn(ALOAD, 5);
mv.visitVarInsn(ILOAD, 8);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "elementAt", "(I)Ljava/lang/Object;");
mv.visitTypeInsn(CHECKCAST, "java/lang/ClassLoader$NativeLibrary");
mv.visitVarInsn(ASTORE, 9);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ALOAD, 9);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader$NativeLibrary", "name", "Ljava/lang/String;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z");
mv.visitJumpInsn(IFEQ, l18);
mv.visitInsn(ICONST_1);
mv.visitVarInsn(ALOAD, 6);
mv.visitInsn(MONITOREXIT);
mv.visitLabel(l16);
mv.visitInsn(IRETURN);
mv.visitLabel(l18);
mv.visitIincInsn(8, 1);
mv.visitJumpInsn(GOTO, l28);
mv.visitLabel(l29);
mv.visitFieldInsn(GETSTATIC, "java/lang/ClassLoader", "loadedLibraryNames", "Ljava/util/Vector;");
mv.visitInsn(DUP);
mv.visitVarInsn(ASTORE, 8);
mv.visitInsn(MONITORENTER);
mv.visitLabel(l7);
mv.visitFieldInsn(GETSTATIC, "java/lang/ClassLoader", "loadedLibraryNames", "Ljava/util/Vector;");
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "contains", "(Ljava/lang/Object;)Z");
Label l30 = new Label();
mv.visitJumpInsn(IFEQ, l30);
mv.visitTypeInsn(NEW, "java/lang/UnsatisfiedLinkError");
mv.visitInsn(DUP);
mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V");
mv.visitLdcInsn("Native Library ");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitLdcInsn(" already loaded in another classloader");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;");
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/UnsatisfiedLinkError", "<init>", "(Ljava/lang/String;)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l30);
mv.visitFieldInsn(GETSTATIC, "java/lang/ClassLoader", "nativeLibraryContext", "Ljava/util/Stack;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Stack", "size", "()I");
mv.visitVarInsn(ISTORE, 9);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 10);
Label l31 = new Label();
mv.visitLabel(l31);
mv.visitVarInsn(ILOAD, 10);
mv.visitVarInsn(ILOAD, 9);
Label l32 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l32);
mv.visitFieldInsn(GETSTATIC, "java/lang/ClassLoader", "nativeLibraryContext", "Ljava/util/Stack;");
mv.visitVarInsn(ILOAD, 10);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Stack", "elementAt", "(I)Ljava/lang/Object;");
mv.visitTypeInsn(CHECKCAST, "java/lang/ClassLoader$NativeLibrary");
mv.visitVarInsn(ASTORE, 11);
mv.visitVarInsn(ALOAD, 3);
mv.visitVarInsn(ALOAD, 11);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader$NativeLibrary", "name", "Ljava/lang/String;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "equals", "(Ljava/lang/Object;)Z");
Label l33 = new Label();
mv.visitJumpInsn(IFEQ, l33);
mv.visitVarInsn(ALOAD, 4);
mv.visitVarInsn(ALOAD, 11);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/ClassLoader$NativeLibrary", "access$200", "(Ljava/lang/ClassLoader$NativeLibrary;)Ljava/lang/Class;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getClassLoader", "()Ljava/lang/ClassLoader;");
mv.visitJumpInsn(IF_ACMPNE, l10);
mv.visitInsn(ICONST_1);
mv.visitVarInsn(ALOAD, 8);
mv.visitInsn(MONITOREXIT);
mv.visitLabel(l8);
mv.visitVarInsn(ALOAD, 6);
mv.visitInsn(MONITOREXIT);
mv.visitLabel(l19);
mv.visitInsn(IRETURN);
mv.visitLabel(l10);
mv.visitTypeInsn(NEW, "java/lang/UnsatisfiedLinkError");
mv.visitInsn(DUP);
mv.visitTypeInsn(NEW, "java/lang/StringBuilder");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/StringBuilder", "<init>", "()V");
mv.visitLdcInsn("Native Library ");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitLdcInsn(" is being loaded in another classloader");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/StringBuilder", "toString", "()Ljava/lang/String;");
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/UnsatisfiedLinkError", "<init>", "(Ljava/lang/String;)V");
mv.visitInsn(ATHROW);
mv.visitLabel(l33);
mv.visitIincInsn(10, 1);
mv.visitJumpInsn(GOTO, l31);
mv.visitLabel(l32);
mv.visitTypeInsn(NEW, "java/lang/ClassLoader$NativeLibrary");
mv.visitInsn(DUP);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader$NativeLibrary", "<init>", "(Ljava/lang/Class;Ljava/lang/String;)V");
mv.visitVarInsn(ASTORE, 10);
mv.visitFieldInsn(GETSTATIC, "java/lang/ClassLoader", "nativeLibraryContext", "Ljava/util/Stack;");
mv.visitVarInsn(ALOAD, 10);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Stack", "push", "(Ljava/lang/Object;)Ljava/lang/Object;");
mv.visitInsn(POP);
mv.visitLabel(l3);
mv.visitVarInsn(ALOAD, 10);
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader$NativeLibrary", "load", "(Ljava/lang/String;)V");
mv.visitLabel(l4);
mv.visitFieldInsn(GETSTATIC, "java/lang/ClassLoader", "nativeLibraryContext", "Ljava/util/Stack;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Stack", "pop", "()Ljava/lang/Object;");
mv.visitInsn(POP);
Label l34 = new Label();
mv.visitJumpInsn(GOTO, l34);
mv.visitLabel(l5);
mv.visitVarInsn(ASTORE, 12);
mv.visitLabel(l6);
mv.visitFieldInsn(GETSTATIC, "java/lang/ClassLoader", "nativeLibraryContext", "Ljava/util/Stack;");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Stack", "pop", "()Ljava/lang/Object;");
mv.visitInsn(POP);
mv.visitVarInsn(ALOAD, 12);
mv.visitInsn(ATHROW);
mv.visitLabel(l34);
mv.visitVarInsn(ALOAD, 10);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader$NativeLibrary", "handle", "J");
mv.visitInsn(LCONST_0);
mv.visitInsn(LCMP);
mv.visitJumpInsn(IFEQ, l12);
mv.visitFieldInsn(GETSTATIC, "java/lang/ClassLoader", "loadedLibraryNames", "Ljava/util/Vector;");
mv.visitVarInsn(ALOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "addElement", "(Ljava/lang/Object;)V");
mv.visitVarInsn(ALOAD, 5);
mv.visitVarInsn(ALOAD, 10);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "addElement", "(Ljava/lang/Object;)V");
mv.visitInsn(ICONST_1);
mv.visitVarInsn(ALOAD, 8);
mv.visitInsn(MONITOREXIT);
mv.visitLabel(l11);
mv.visitVarInsn(ALOAD, 6);
mv.visitInsn(MONITOREXIT);
mv.visitLabel(l20);
mv.visitInsn(IRETURN);
mv.visitLabel(l12);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ALOAD, 8);
mv.visitInsn(MONITOREXIT);
mv.visitLabel(l13);
mv.visitVarInsn(ALOAD, 6);
mv.visitInsn(MONITOREXIT);
mv.visitLabel(l21);
mv.visitInsn(IRETURN);
mv.visitLabel(l9);
mv.visitVarInsn(ASTORE, 13);
mv.visitVarInsn(ALOAD, 8);
mv.visitInsn(MONITOREXIT);
mv.visitLabel(l14);
mv.visitVarInsn(ALOAD, 13);
mv.visitInsn(ATHROW);
mv.visitLabel(l17);
mv.visitVarInsn(ASTORE, 14);
mv.visitVarInsn(ALOAD, 6);
mv.visitInsn(MONITOREXIT);
mv.visitLabel(l22);
mv.visitVarInsn(ALOAD, 14);
mv.visitInsn(ATHROW);
mv.visitMaxs(4, 15);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_STATIC, "findNative", "(Ljava/lang/ClassLoader;Ljava/lang/String;)J", null, null);
mv.visitCode();
Label l0 = new Label();
Label l1 = new Label();
Label l2 = new Label();
mv.visitTryCatchBlock(l0, l1, l2, null);
Label l3 = new Label();
Label l4 = new Label();
mv.visitTryCatchBlock(l3, l4, l2, null);
Label l5 = new Label();
mv.visitTryCatchBlock(l2, l5, l2, null);
mv.visitVarInsn(ALOAD, 0);
Label l6 = new Label();
mv.visitJumpInsn(IFNULL, l6);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "nativeLibraries", "Ljava/util/Vector;");
Label l7 = new Label();
mv.visitJumpInsn(GOTO, l7);
mv.visitLabel(l6);
mv.visitFieldInsn(GETSTATIC, "java/lang/ClassLoader", "systemNativeLibraries", "Ljava/util/Vector;");
mv.visitLabel(l7);
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 2);
mv.visitInsn(DUP);
mv.visitVarInsn(ASTORE, 3);
mv.visitInsn(MONITORENTER);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "size", "()I");
mv.visitVarInsn(ISTORE, 4);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 5);
Label l8 = new Label();
mv.visitLabel(l8);
mv.visitVarInsn(ILOAD, 5);
mv.visitVarInsn(ILOAD, 4);
Label l9 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l9);
mv.visitVarInsn(ALOAD, 2);
mv.visitVarInsn(ILOAD, 5);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Vector", "elementAt", "(I)Ljava/lang/Object;");
mv.visitTypeInsn(CHECKCAST, "java/lang/ClassLoader$NativeLibrary");
mv.visitVarInsn(ASTORE, 6);
mv.visitVarInsn(ALOAD, 6);
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ClassLoader$NativeLibrary", "find", "(Ljava/lang/String;)J");
mv.visitVarInsn(LSTORE, 7);
mv.visitVarInsn(LLOAD, 7);
mv.visitInsn(LCONST_0);
mv.visitInsn(LCMP);
mv.visitJumpInsn(IFEQ, l3);
mv.visitVarInsn(LLOAD, 7);
mv.visitVarInsn(ALOAD, 3);
mv.visitInsn(MONITOREXIT);
mv.visitLabel(l1);
mv.visitInsn(LRETURN);
mv.visitLabel(l3);
mv.visitIincInsn(5, 1);
mv.visitJumpInsn(GOTO, l8);
mv.visitLabel(l9);
mv.visitVarInsn(ALOAD, 3);
mv.visitInsn(MONITOREXIT);
mv.visitLabel(l4);
Label l10 = new Label();
mv.visitJumpInsn(GOTO, l10);
mv.visitLabel(l2);
mv.visitVarInsn(ASTORE, 9);
mv.visitVarInsn(ALOAD, 3);
mv.visitInsn(MONITOREXIT);
mv.visitLabel(l5);
mv.visitVarInsn(ALOAD, 9);
mv.visitInsn(ATHROW);
mv.visitLabel(l10);
mv.visitInsn(LCONST_0);
mv.visitInsn(LRETURN);
mv.visitMaxs(4, 10);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_SYNCHRONIZED, "setDefaultAssertionStatus", "(Z)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "classAssertionStatus", "Ljava/util/Map;");
Label l0 = new Label();
mv.visitJumpInsn(IFNONNULL, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "initializeJavaAssertionMaps", "()V");
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ILOAD, 1);
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "defaultAssertionStatus", "Z");
mv.visitInsn(RETURN);
mv.visitMaxs(2, 2);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_SYNCHRONIZED, "setPackageAssertionStatus", "(Ljava/lang/String;Z)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "packageAssertionStatus", "Ljava/util/Map;");
Label l0 = new Label();
mv.visitJumpInsn(IFNONNULL, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "initializeJavaAssertionMaps", "()V");
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "packageAssertionStatus", "Ljava/util/Map;");
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Boolean", "valueOf", "(Z)Ljava/lang/Boolean;");
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
mv.visitInsn(POP);
mv.visitInsn(RETURN);
mv.visitMaxs(3, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_SYNCHRONIZED, "setClassAssertionStatus", "(Ljava/lang/String;Z)V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "classAssertionStatus", "Ljava/util/Map;");
Label l0 = new Label();
mv.visitJumpInsn(IFNONNULL, l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ClassLoader", "initializeJavaAssertionMaps", "()V");
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "classAssertionStatus", "Ljava/util/Map;");
mv.visitVarInsn(ALOAD, 1);
mv.visitVarInsn(ILOAD, 2);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Boolean", "valueOf", "(Z)Ljava/lang/Boolean;");
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
mv.visitInsn(POP);
mv.visitInsn(RETURN);
mv.visitMaxs(3, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PUBLIC + ACC_SYNCHRONIZED, "clearAssertionStatus", "()V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitTypeInsn(NEW, "java/util/HashMap");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/HashMap", "<init>", "()V");
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "classAssertionStatus", "Ljava/util/Map;");
mv.visitVarInsn(ALOAD, 0);
mv.visitTypeInsn(NEW, "java/util/HashMap");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/HashMap", "<init>", "()V");
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "packageAssertionStatus", "Ljava/util/Map;");
mv.visitVarInsn(ALOAD, 0);
mv.visitInsn(ICONST_0);
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "defaultAssertionStatus", "Z");
mv.visitInsn(RETURN);
mv.visitMaxs(3, 1);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_SYNCHRONIZED, "desiredAssertionStatus", "(Ljava/lang/String;)Z", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "classAssertionStatus", "Ljava/util/Map;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
mv.visitTypeInsn(CHECKCAST, "java/lang/Boolean");
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 2);
Label l0 = new Label();
mv.visitJumpInsn(IFNULL, l0);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Boolean", "booleanValue", "()Z");
mv.visitInsn(IRETURN);
mv.visitLabel(l0);
mv.visitVarInsn(ALOAD, 1);
mv.visitLdcInsn(".");
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "lastIndexOf", "(Ljava/lang/String;)I");
mv.visitVarInsn(ISTORE, 3);
mv.visitVarInsn(ILOAD, 3);
Label l1 = new Label();
mv.visitJumpInsn(IFGE, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "packageAssertionStatus", "Ljava/util/Map;");
mv.visitInsn(ACONST_NULL);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
mv.visitTypeInsn(CHECKCAST, "java/lang/Boolean");
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 2);
mv.visitJumpInsn(IFNULL, l1);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Boolean", "booleanValue", "()Z");
mv.visitInsn(IRETURN);
mv.visitLabel(l1);
mv.visitVarInsn(ILOAD, 3);
Label l2 = new Label();
mv.visitJumpInsn(IFLE, l2);
mv.visitVarInsn(ALOAD, 1);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ILOAD, 3);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "substring", "(II)Ljava/lang/String;");
mv.visitVarInsn(ASTORE, 1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "packageAssertionStatus", "Ljava/util/Map;");
mv.visitVarInsn(ALOAD, 1);
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "get", "(Ljava/lang/Object;)Ljava/lang/Object;");
mv.visitTypeInsn(CHECKCAST, "java/lang/Boolean");
mv.visitVarInsn(ASTORE, 2);
mv.visitVarInsn(ALOAD, 2);
Label l3 = new Label();
mv.visitJumpInsn(IFNULL, l3);
mv.visitVarInsn(ALOAD, 2);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Boolean", "booleanValue", "()Z");
mv.visitInsn(IRETURN);
mv.visitLabel(l3);
mv.visitVarInsn(ALOAD, 1);
mv.visitLdcInsn(".");
mv.visitVarInsn(ILOAD, 3);
mv.visitInsn(ICONST_1);
mv.visitInsn(ISUB);
mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "lastIndexOf", "(Ljava/lang/String;I)I");
mv.visitVarInsn(ISTORE, 3);
mv.visitJumpInsn(GOTO, l1);
mv.visitLabel(l2);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "defaultAssertionStatus", "Z");
mv.visitInsn(IRETURN);
mv.visitMaxs(4, 4);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE, "initializeJavaAssertionMaps", "()V", null, null);
mv.visitCode();
mv.visitVarInsn(ALOAD, 0);
mv.visitTypeInsn(NEW, "java/util/HashMap");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/HashMap", "<init>", "()V");
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "classAssertionStatus", "Ljava/util/Map;");
mv.visitVarInsn(ALOAD, 0);
mv.visitTypeInsn(NEW, "java/util/HashMap");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/HashMap", "<init>", "()V");
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "packageAssertionStatus", "Ljava/util/Map;");
mv.visitMethodInsn(INVOKESTATIC, "java/lang/ClassLoader", "retrieveDirectives", "()Ljava/lang/AssertionStatusDirectives;");
mv.visitVarInsn(ASTORE, 1);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 2);
Label l0 = new Label();
mv.visitLabel(l0);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETFIELD, "java/lang/AssertionStatusDirectives", "classes", "[Ljava/lang/String;");
mv.visitInsn(ARRAYLENGTH);
Label l1 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l1);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "classAssertionStatus", "Ljava/util/Map;");
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETFIELD, "java/lang/AssertionStatusDirectives", "classes", "[Ljava/lang/String;");
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETFIELD, "java/lang/AssertionStatusDirectives", "classEnabled", "[Z");
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(BALOAD);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Boolean", "valueOf", "(Z)Ljava/lang/Boolean;");
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
mv.visitInsn(POP);
mv.visitIincInsn(2, 1);
mv.visitJumpInsn(GOTO, l0);
mv.visitLabel(l1);
mv.visitInsn(ICONST_0);
mv.visitVarInsn(ISTORE, 2);
Label l2 = new Label();
mv.visitLabel(l2);
mv.visitVarInsn(ILOAD, 2);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETFIELD, "java/lang/AssertionStatusDirectives", "packages", "[Ljava/lang/String;");
mv.visitInsn(ARRAYLENGTH);
Label l3 = new Label();
mv.visitJumpInsn(IF_ICMPGE, l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitFieldInsn(GETFIELD, "java/lang/ClassLoader", "packageAssertionStatus", "Ljava/util/Map;");
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETFIELD, "java/lang/AssertionStatusDirectives", "packages", "[Ljava/lang/String;");
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(AALOAD);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETFIELD, "java/lang/AssertionStatusDirectives", "packageEnabled", "[Z");
mv.visitVarInsn(ILOAD, 2);
mv.visitInsn(BALOAD);
mv.visitMethodInsn(INVOKESTATIC, "java/lang/Boolean", "valueOf", "(Z)Ljava/lang/Boolean;");
mv.visitMethodInsn(INVOKEINTERFACE, "java/util/Map", "put", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");
mv.visitInsn(POP);
mv.visitIincInsn(2, 1);
mv.visitJumpInsn(GOTO, l2);
mv.visitLabel(l3);
mv.visitVarInsn(ALOAD, 0);
mv.visitVarInsn(ALOAD, 1);
mv.visitFieldInsn(GETFIELD, "java/lang/AssertionStatusDirectives", "deflt", "Z");
mv.visitFieldInsn(PUTFIELD, "java/lang/ClassLoader", "defaultAssertionStatus", "Z");
mv.visitInsn(RETURN);
mv.visitMaxs(4, 3);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_PRIVATE + ACC_STATIC + ACC_NATIVE, "retrieveDirectives", "()Ljava/lang/AssertionStatusDirectives;", null, null);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$000", "()Ljava/util/Vector;", null, null);
mv.visitCode();
mv.visitFieldInsn(GETSTATIC, "java/lang/ClassLoader", "loadedLibraryNames", "Ljava/util/Vector;");
mv.visitInsn(ARETURN);
mv.visitMaxs(1, 0);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_STATIC + ACC_SYNTHETIC, "access$100", "()Ljava/util/Stack;", null, null);
mv.visitCode();
mv.visitFieldInsn(GETSTATIC, "java/lang/ClassLoader", "nativeLibraryContext", "Ljava/util/Stack;");
mv.visitInsn(ARETURN);
mv.visitMaxs(1, 0);
mv.visitEnd();
}
{
mv = cw.visitMethod(ACC_STATIC, "<clinit>", "()V", null, null);
mv.visitCode();
mv.visitMethodInsn(INVOKESTATIC, "java/lang/ClassLoader", "registerNatives", "()V");
mv.visitTypeInsn(NEW, "java/util/Vector");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/Vector", "<init>", "()V");
mv.visitFieldInsn(PUTSTATIC, "java/lang/ClassLoader", "loadedLibraryNames", "Ljava/util/Vector;");
mv.visitTypeInsn(NEW, "java/util/Vector");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/Vector", "<init>", "()V");
mv.visitFieldInsn(PUTSTATIC, "java/lang/ClassLoader", "systemNativeLibraries", "Ljava/util/Vector;");
mv.visitTypeInsn(NEW, "java/util/Stack");
mv.visitInsn(DUP);
mv.visitMethodInsn(INVOKESPECIAL, "java/util/Stack", "<init>", "()V");
mv.visitFieldInsn(PUTSTATIC, "java/lang/ClassLoader", "nativeLibraryContext", "Ljava/util/Stack;");
mv.visitInsn(RETURN);
mv.visitMaxs(2, 0);
mv.visitEnd();
}
cw.visitEnd();

return cw.toByteArray();
}
}


